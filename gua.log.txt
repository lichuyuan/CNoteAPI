0:52:59 Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: null,
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'todos',
     collectionName: 'todos',
     conn: 
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 2,
        _closeCalled: false,
        _hasOpened: false,
        _listening: false,
        _connectionOptions: [Object],
        client: [Object],
        name: 'todo',
        '$initialConnection': [Object],
        then: [Function],
        catch: [Function] },
     queue: [],
     buffer: true,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Object], _posts: [Object] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'Todo',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 2,
        _closeCalled: false,
        _hasOpened: false,
        _listening: false,
        _connectionOptions: [Object],
        client: [Object],
        name: 'todo',
        '$initialConnection': [Object],
        then: [Function],
        catch: [Function] },
     discriminators: undefined,
     '$appliedMethods': true,
     all: [AsyncFunction: all],
     get: [AsyncFunction: get],
     findBy: [AsyncFunction: findBy],
     findAll: [AsyncFunction: findAll],
     findByQuery: [AsyncFunction: findByQuery],
     create: [AsyncFunction: create],
     remove: [AsyncFunction: remove],
     complete: [AsyncFunction: complete],
     update: [AsyncFunction: update],
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: [Object],
        singleNestedPaths: {},
        nested: {},
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: [Object],
        statics: [Object],
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: {},
        options: [Object],
        '$globalPluginsApplied': true },
     collection: 
      NativeCollection {
        collection: null,
        opts: [Object],
        name: 'todos',
        collectionName: 'todos',
        conn: [Object],
        queue: [],
        buffer: true,
        emitter: [Object] },
     Query: { [Function] base: [Object] },
     '$__insertMany': [Function],
     '$init': Promise { <pending>, catch: [Function] } },
  schema: 
   Schema {
     obj: 
      { task: [Function: String],
        completed: [Object],
        user_id: [Function: String],
        completed_time: [Object],
        level: [Object],
        created_time: [Object],
        updated_time: [Object] },
     paths: 
      { task: [Object],
        completed: [Object],
        user_id: [Object],
        completed_time: [Object],
        level: [Object],
        created_time: [Object],
        updated_time: [Object],
        _id: [Object],
        __v: [Object] },
     aliases: {},
     subpaths: {},
     virtuals: { id: [Object] },
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: { toHexString: [Function] },
     statics: 
      { all: [AsyncFunction: all],
        get: [AsyncFunction: get],
        findBy: [AsyncFunction: findBy],
        findAll: [AsyncFunction: findAll],
        findByQuery: [AsyncFunction: findByQuery],
        create: [AsyncFunction: create],
        remove: [AsyncFunction: remove],
        complete: [AsyncFunction: complete],
        update: [AsyncFunction: update] },
     tree: 
      { task: [Function: String],
        completed: [Object],
        user_id: [Function: String],
        completed_time: [Object],
        level: [Object],
        created_time: [Object],
        updated_time: [Object],
        _id: [Object],
        __v: [Function: Number],
        id: [Object] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Object] },
     _userProvidedOptions: {},
     options: 
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true },
  op: 'find',
  options: {},
  _conditions: { level: 0 },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: null,
        opts: [Object],
        name: 'todos',
        collectionName: 'todos',
        conn: [Object],
        queue: [],
        buffer: true,
        emitter: [Object] },
     collectionName: 'todos' },
  _traceFunction: undefined }
0:52:59 listening server at http://0.0.0.0:5000
