/*
本次预习内容, 都是理论知识, 随便看看, 以上课为准


摘要算法 Hash /用处/常见套路
----------------------

摘要算法是一种能产生特殊输出格式的算法。
给定任意长度的数据生成定长的密文。
摘要结果是不可逆的, 不能被还原为原数据。
理论上无法通过反向运算取得原数据内容。
并且, 一个安全的摘要算法是无法找到碰撞的。
碰撞是说, 两个不一样的数据, 产生了一样的结果。

碰撞例子：
12345 生成的摘要是 15
54321 生成的摘要也是 15

1. 通常只被用来做数据完整性验证，
  比如：网站在下载页面公布文件的 sha1 摘要结果，
  你下载后自己生成结果来对比，就能知道文件是否被篡改。
2. 或者是用来保护用户密码，防止撞库


常用的摘要算法主要有 md5 和 sha1:
md5 的输出结果为 32 字符
sha1 的输出结果为 40 字符
sha256

用法见 hash_demo.js



用 md5 或者 sha1 保护用户的密码
-------------------------------
用户的密码存在数据库中, 有可能会被黑客盗取(拖库)。
所以一般会对用户的密码使用摘要算法保护。
存储在数据库中的是摘要。
所以找回密码是不可能的, 只能重置, 因为摘要不可逆。

暴力破解
--------





用盐（salt）防止黑客对密码进行碰撞
------------------------------
假如用户使用简单密码, 破解者可以用提前生成的简单密码摘要表（彩虹表）来破解原文。
所以我们会存储一个额外的信息，扰乱用户的简单密码。(具体的上课会详细解释)

/reset_password?reset_id=15517259c9e8fac841e4502796791651
{
    '827ccb0eea8a706c4c34a16891f84e7b': {
        user_id: 10,
        expired_time: 1516191694665,
    }
}

uuid4


加密
    https 的原理, 非对称加密 rsa
    对称性加密

发数据的时候, 浏览器用服务器的公钥加密, 服务器是可以用自己的私钥解密的
服务器把浏览器的公钥拿过来, 加密响应, 只有浏览器的私钥才能解开


微博
----
实现一个微博程序, 和之前 todo 程序的不同之处是带有评论功能



*/

var o = {
    1: {
        id: 1,
        username: 'gua',
        password: '123',
    },
    2: {
        id: 2,
        username: 'xiao',
        password: '123',
    },
    100: {
        id: 100,
        username: 'xiao123',
        password: '123',
    },
    50: {
        id: 50,
        username: 'gua50',
        password: '123',
    },
}

var index = {
    'username': {
        gua: 1,
        xiao: 2,
        xiao123: 100,
        gua50: 50,
    },
    'note': {
        '吃瓜': 1,
        'qq': 2,
        'node': 50,
    }
}


// 假设要更新 id 为 1 的 todo 的完成状态
// 我们可以有两种方案
// 方案 1, static method
var form = {
    task: '吃饭',
    completed: true,
}
Todo.update(1, form)

// 方案 2, 查找出来再用实例更新
var t = Todo.get(1)
t.update(form)

// 方案 3 最野鸡的方案
var t = Todo.get(1)
t.task = form.task || ''
t.completed= true
t.save()

// 写程序要写 what, 不要写 how
// 我们只关心结果, 不关心过程和细节